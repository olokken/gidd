{"ast":null,"code":"import _toConsumableArray from\"/Users/olelokken/DEV/gidd/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{getDistance}from'geolib';var comingSort=function comingSort(activities){return _toConsumableArray(activities).sort(function(act1,act2){return act1.time-act2.time;});};var distanceSort=function distanceSort(activities,location){if(location){return _toConsumableArray(activities).sort(function(act1,act2){var distance1=getDistance(location,{latitude:act1.latitude,longitude:act1.longitude});var distance2=getDistance(location,{latitude:act2.latitude,longitude:act2.longitude});return distance1-distance2;});}return activities;};var capacitySort=function capacitySort(activities){return _toConsumableArray(activities).sort(function(act1,act2){return act1.capacity-act2.capacity;});};var activityLevelSort=function activityLevelSort(activities){console.log('horeri');return _toConsumableArray(activities).sort(function(act1,act2){var lastLetter1=act1.activityLevel.charCodeAt(act1.activityLevel.length-1);var lastLetter2=act2.activityLevel.charCodeAt(act2.activityLevel.length-1);return lastLetter2-lastLetter1;});};export var SortFunctions={comingSort:comingSort,distanceSort:distanceSort,capacitySort:capacitySort,activityLevelSort:activityLevelSort};","map":{"version":3,"sources":["/Users/olelokken/DEV/gidd/client/src/components/SortingComponents/SortingFunctions.tsx"],"names":["getDistance","comingSort","activities","sort","act1","act2","time","distanceSort","location","distance1","latitude","longitude","distance2","capacitySort","capacity","activityLevelSort","console","log","lastLetter1","activityLevel","charCodeAt","length","lastLetter2","SortFunctions"],"mappings":"+JAEA,OAASA,WAAT,KAA4B,QAA5B,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,UAAD,CAAwD,CACvE,MAAO,oBAAIA,UAAJ,EAAgBC,IAAhB,CAAqB,SAACC,IAAD,CAAOC,IAAP,CAAgB,CACxC,MAAOD,CAAAA,IAAI,CAACE,IAAL,CAAYD,IAAI,CAACC,IAAxB,CACH,CAFM,CAAP,CAGH,CAJD,CAMA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CACjBL,UADiB,CAEjBM,QAFiB,CAGI,CACrB,GAAIA,QAAJ,CAAc,CACV,MAAO,oBAAIN,UAAJ,EAAgBC,IAAhB,CAAqB,SAACC,IAAD,CAAOC,IAAP,CAAgB,CACxC,GAAMI,CAAAA,SAAS,CAAGT,WAAW,CAACQ,QAAD,CAAW,CACpCE,QAAQ,CAAEN,IAAI,CAACM,QADqB,CAEpCC,SAAS,CAAEP,IAAI,CAACO,SAFoB,CAAX,CAA7B,CAIA,GAAMC,CAAAA,SAAS,CAAGZ,WAAW,CAACQ,QAAD,CAAW,CACpCE,QAAQ,CAAEL,IAAI,CAACK,QADqB,CAEpCC,SAAS,CAAEN,IAAI,CAACM,SAFoB,CAAX,CAA7B,CAIA,MAAOF,CAAAA,SAAS,CAAGG,SAAnB,CACH,CAVM,CAAP,CAWH,CACD,MAAOV,CAAAA,UAAP,CACH,CAlBD,CAoBA,GAAMW,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACX,UAAD,CAAwD,CACzE,MAAO,oBAAIA,UAAJ,EAAgBC,IAAhB,CAAqB,SAACC,IAAD,CAAOC,IAAP,CAAgB,CACxC,MAAOD,CAAAA,IAAI,CAACU,QAAL,CAAgBT,IAAI,CAACS,QAA5B,CACH,CAFM,CAAP,CAGH,CAJD,CAMA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CACtBb,UADsB,CAED,CACrBc,OAAO,CAACC,GAAR,CAAY,QAAZ,EACA,MAAO,oBAAIf,UAAJ,EAAgBC,IAAhB,CAAqB,SAACC,IAAD,CAAOC,IAAP,CAAgB,CACxC,GAAMa,CAAAA,WAAmB,CAAGd,IAAI,CAACe,aAAL,CAAmBC,UAAnB,CACxBhB,IAAI,CAACe,aAAL,CAAmBE,MAAnB,CAA4B,CADJ,CAA5B,CAGA,GAAMC,CAAAA,WAAmB,CAAGjB,IAAI,CAACc,aAAL,CAAmBC,UAAnB,CACxBf,IAAI,CAACc,aAAL,CAAmBE,MAAnB,CAA4B,CADJ,CAA5B,CAGA,MAAOC,CAAAA,WAAW,CAAGJ,WAArB,CACH,CARM,CAAP,CASH,CAbD,CAeA,MAAO,IAAMK,CAAAA,aAAa,CAAG,CACzBtB,UAAU,CAAVA,UADyB,CAEzBM,YAAY,CAAZA,YAFyB,CAGzBM,YAAY,CAAZA,YAHyB,CAIzBE,iBAAiB,CAAjBA,iBAJyB,CAAtB","sourcesContent":["import ActivityResponse from '../../interfaces/ActivityResponse';\nimport DefaultCenter from '../../interfaces/DefaultCenter';\nimport { getDistance } from 'geolib';\n\nconst comingSort = (activities: ActivityResponse[]): ActivityResponse[] => {\n    return [...activities].sort((act1, act2) => {\n        return act1.time - act2.time;\n    });\n};\n\nconst distanceSort = (\n    activities: ActivityResponse[],\n    location: DefaultCenter | undefined\n): ActivityResponse[] => {\n    if (location) {\n        return [...activities].sort((act1, act2) => {\n            const distance1 = getDistance(location, {\n                latitude: act1.latitude,\n                longitude: act1.longitude,\n            });\n            const distance2 = getDistance(location, {\n                latitude: act2.latitude,\n                longitude: act2.longitude,\n            });\n            return distance1 - distance2;\n        });\n    }\n    return activities;\n};\n\nconst capacitySort = (activities: ActivityResponse[]): ActivityResponse[] => {\n    return [...activities].sort((act1, act2) => {\n        return act1.capacity - act2.capacity;\n    });\n};\n\nconst activityLevelSort = (\n    activities: ActivityResponse[]\n): ActivityResponse[] => {\n    console.log('horeri');\n    return [...activities].sort((act1, act2) => {\n        const lastLetter1: number = act1.activityLevel.charCodeAt(\n            act1.activityLevel.length - 1\n        );\n        const lastLetter2: number = act2.activityLevel.charCodeAt(\n            act2.activityLevel.length - 1\n        );\n        return lastLetter2 - lastLetter1;\n    });\n};\n\nexport const SortFunctions = {\n    comingSort,\n    distanceSort,\n    capacitySort,\n    activityLevelSort,\n};\n"]},"metadata":{},"sourceType":"module"}