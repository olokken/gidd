{"ast":null,"code":"var _jsxFileName = \"/Users/olelokken/DEV/gidd/client/src/components/WeatherComponents/WeatherComponent.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport WeatherContent from './WeatherContent';\n/* Her hentast værmeldinga frå openweathermap og den rette værmeldinga vert sendt til\nweathercontent*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst WeatherComponent = ({\n  lat,\n  lon,\n  time\n}) => {\n  _s();\n\n  const latitude = new String(lat);\n  const longitude = new String(lon);\n  const dateExact = new Date(time);\n  const dateRounded = roundThirdHour(dateExact);\n  const openWeatherURL = \"http://api.openweathermap.org/data/2.5/forecast?\";\n  const lat_long = \"lat=\" + latitude + \"&lon=\" + longitude;\n  const join_key = \"&appid=\" + \"bf5aff56f689df8dd3147e0a62c61bac\";\n  const units = \"&units=metric\";\n  const oldNum = new Number(dateRounded);\n  const num = changeFormat(oldNum);\n  const [weather, setWeather] = useState({\n    cityName: '',\n    countryName: '',\n    date: '',\n    temp: 0,\n    description: '',\n    hiTemp: 0,\n    loTemp: 0,\n    wind: 0,\n    icon: '',\n    id: 0,\n    main: ''\n  });\n  /* Runder av tida til nærmaste tredje time */\n\n  function roundThirdHour(date) {\n    const myDate = date;\n    myDate.setHours(myDate.getHours() + Math.round(myDate.getMinutes() / 60));\n    myDate.setMinutes(0, 0, 0);\n    const diff = myDate.getHours() % 3;\n\n    if (diff === 1) {\n      myDate.setHours(myDate.getHours() - 1);\n    }\n\n    if (diff === 2) {\n      myDate.setHours(myDate.getHours() + 1);\n    }\n\n    return myDate;\n  }\n\n  function changeFormat(num) {\n    let newNum = num / 1000;\n    newNum = newNum + 7200;\n    return newNum;\n  }\n  /* Hentar værmeldinger og finn den som stemmer for tidspunktet til økta */\n\n\n  useEffect(() => {\n    Promise.all([fetch(openWeatherURL + lat_long + join_key + units)]).then(([response]) => {\n      if (response.ok) {\n        return Promise.all([response.json()]);\n      }\n\n      throw Error(response.statusText);\n    }).then(([data]) => {\n      for (const w in data.list) {\n        if (data.list[w].dt === num) {\n          setWeather({\n            cityName: data.city.name,\n            countryName: data.city.country,\n            date: data.list[w].dt_txt,\n            temp: data.list[w].main.temp,\n            description: data.list[w].weather[0].description,\n            hiTemp: data.list[w].main.temp_max,\n            loTemp: data.list[w].main.temp_min,\n            wind: data.list[w].wind.speed,\n            icon: data.list[w].weather[0].icon,\n            id: data.list[w].weather[0].id,\n            main: data.list[w].weather[0].main\n          });\n        }\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WeatherContent, {\n    weatherData: weather\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherComponent, \"iUxl72J+v+Ew3yuVtUngssh01hQ=\");\n\n_c = WeatherComponent;\nexport default WeatherComponent;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherComponent\");","map":{"version":3,"sources":["/Users/olelokken/DEV/gidd/client/src/components/WeatherComponents/WeatherComponent.tsx"],"names":["React","useEffect","useState","WeatherContent","WeatherComponent","lat","lon","time","latitude","String","longitude","dateExact","Date","dateRounded","roundThirdHour","openWeatherURL","lat_long","join_key","units","oldNum","Number","num","changeFormat","weather","setWeather","cityName","countryName","date","temp","description","hiTemp","loTemp","wind","icon","id","main","myDate","setHours","getHours","Math","round","getMinutes","setMinutes","diff","newNum","Promise","all","fetch","then","response","ok","json","Error","statusText","data","w","list","dt","city","name","country","dt_txt","temp_max","temp_min","speed","catch","error","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Weather from '../../interfaces/Weather';\nimport WeatherContent from './WeatherContent';\n/* Her hentast værmeldinga frå openweathermap og den rette værmeldinga vert sendt til\nweathercontent*/\n\n\ninterface Props{\n  lat: number;\n  lon: number;\n  time: number;\n}\n\nconst WeatherComponent = ({ lat, lon, time }: Props) =>{\n  const latitude = new String(lat);\n  const longitude = new String(lon);\n  const dateExact = new Date(time);\n  const dateRounded = roundThirdHour(dateExact);\n  const openWeatherURL = \"http://api.openweathermap.org/data/2.5/forecast?\";\n  const lat_long = \"lat=\" +latitude+ \"&lon=\" +longitude;\n  const join_key = \"&appid=\" + \"bf5aff56f689df8dd3147e0a62c61bac\";\n  const units = \"&units=metric\";\n  const oldNum = new Number(dateRounded);\n  const num = changeFormat(oldNum);\n  const [weather, setWeather] = useState<Weather>({\n    cityName: '',\n    countryName: '',\n    date: '',\n    temp: 0,\n    description: '',\n    hiTemp: 0,\n    loTemp: 0,\n    wind: 0,\n    icon: '',\n    id: 0,\n    main: '',\n});\n\n  /* Runder av tida til nærmaste tredje time */\n  function roundThirdHour(date: Date) {\n    const myDate = date;\n    myDate.setHours(myDate.getHours() + Math.round(myDate.getMinutes()/60));\n    myDate.setMinutes(0, 0, 0);\n    const diff = myDate.getHours()%3;\n    if(diff===1){ myDate.setHours(myDate.getHours()-1)}\n    if(diff===2){ myDate.setHours(myDate.getHours()+1)}\n\n    return myDate;\n}\n  function changeFormat(num: any) {\n    let newNum = num/1000;\n    newNum = newNum + 7200;\n    return newNum;\n  }\n\n/* Hentar værmeldinger og finn den som stemmer for tidspunktet til økta */\n  useEffect(() => {\n    Promise.all([fetch(openWeatherURL+lat_long+join_key+units)])\n    .then(([response]) => {\n      if(response.ok){\n      return Promise.all([response.json()]);\n    }\n    throw Error(response.statusText);\n    })\n    .then(([data]) => {\n      for (const w in data.list){\n        if(data.list[w].dt === num){\n          setWeather({\n            cityName: data.city.name,\n            countryName: data.city.country,\n            date: data.list[w].dt_txt,\n            temp: data.list[w].main.temp,\n            description: data.list[w].weather[0].description,\n            hiTemp: data.list[w].main.temp_max,\n            loTemp: data.list[w].main.temp_min,\n            wind: data.list[w].wind.speed,\n            icon: data.list[w].weather[0].icon,\n            id: data.list[w].weather[0].id,\n            main: data.list[w].weather[0].main,\n          })\n        }\n      }\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }, []); \n\n  return(\n    <WeatherContent\n      weatherData={weather}\n    />\n  )\n}\n\nexport default WeatherComponent;"]},"metadata":{},"sourceType":"module"}