{"ast":null,"code":"import { getDistance } from 'geolib';\n\nconst comingSort = activities => {\n  return [...activities].sort((act1, act2) => {\n    return act1.time - act2.time;\n  });\n};\n\nconst distanceSort = (activities, location) => {\n  if (location) {\n    return [...activities].sort((act1, act2) => {\n      const distance1 = getDistance(location, {\n        latitude: act1.latitude,\n        longitude: act1.longitude\n      });\n      const distance2 = getDistance(location, {\n        latitude: act2.latitude,\n        longitude: act2.longitude\n      });\n      return distance1 - distance2;\n    });\n  }\n\n  return activities;\n};\n\nconst capacitySort = activities => {\n  return [...activities].sort((act1, act2) => {\n    return act1.capacity - act2.capacity;\n  });\n};\n\nconst activityLevelSort = activities => {\n  console.log('horeri');\n  return [...activities].sort((act1, act2) => {\n    const lastLetter1 = act1.activityLevel.charCodeAt(act1.activityLevel.length - 1);\n    const lastLetter2 = act2.activityLevel.charCodeAt(act2.activityLevel.length - 1);\n    return lastLetter2 - lastLetter1;\n  });\n};\n\nexport const SortFunctions = {\n  comingSort,\n  distanceSort,\n  capacitySort,\n  activityLevelSort\n};","map":{"version":3,"sources":["/Users/olelokken/DEV/gidd/client/src/components/SortingComponents/SortingFunctions.tsx"],"names":["getDistance","comingSort","activities","sort","act1","act2","time","distanceSort","location","distance1","latitude","longitude","distance2","capacitySort","capacity","activityLevelSort","console","log","lastLetter1","activityLevel","charCodeAt","length","lastLetter2","SortFunctions"],"mappings":"AAEA,SAASA,WAAT,QAA4B,QAA5B;;AAEA,MAAMC,UAAU,GAAIC,UAAD,IAAwD;AACvE,SAAO,CAAC,GAAGA,UAAJ,EAAgBC,IAAhB,CAAqB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxC,WAAOD,IAAI,CAACE,IAAL,GAAYD,IAAI,CAACC,IAAxB;AACH,GAFM,CAAP;AAGH,CAJD;;AAMA,MAAMC,YAAY,GAAG,CACjBL,UADiB,EAEjBM,QAFiB,KAGI;AACrB,MAAIA,QAAJ,EAAc;AACV,WAAO,CAAC,GAAGN,UAAJ,EAAgBC,IAAhB,CAAqB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxC,YAAMI,SAAS,GAAGT,WAAW,CAACQ,QAAD,EAAW;AACpCE,QAAAA,QAAQ,EAAEN,IAAI,CAACM,QADqB;AAEpCC,QAAAA,SAAS,EAAEP,IAAI,CAACO;AAFoB,OAAX,CAA7B;AAIA,YAAMC,SAAS,GAAGZ,WAAW,CAACQ,QAAD,EAAW;AACpCE,QAAAA,QAAQ,EAAEL,IAAI,CAACK,QADqB;AAEpCC,QAAAA,SAAS,EAAEN,IAAI,CAACM;AAFoB,OAAX,CAA7B;AAIA,aAAOF,SAAS,GAAGG,SAAnB;AACH,KAVM,CAAP;AAWH;;AACD,SAAOV,UAAP;AACH,CAlBD;;AAoBA,MAAMW,YAAY,GAAIX,UAAD,IAAwD;AACzE,SAAO,CAAC,GAAGA,UAAJ,EAAgBC,IAAhB,CAAqB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxC,WAAOD,IAAI,CAACU,QAAL,GAAgBT,IAAI,CAACS,QAA5B;AACH,GAFM,CAAP;AAGH,CAJD;;AAMA,MAAMC,iBAAiB,GACnBb,UADsB,IAED;AACrBc,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,SAAO,CAAC,GAAGf,UAAJ,EAAgBC,IAAhB,CAAqB,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACxC,UAAMa,WAAmB,GAAGd,IAAI,CAACe,aAAL,CAAmBC,UAAnB,CACxBhB,IAAI,CAACe,aAAL,CAAmBE,MAAnB,GAA4B,CADJ,CAA5B;AAGA,UAAMC,WAAmB,GAAGjB,IAAI,CAACc,aAAL,CAAmBC,UAAnB,CACxBf,IAAI,CAACc,aAAL,CAAmBE,MAAnB,GAA4B,CADJ,CAA5B;AAGA,WAAOC,WAAW,GAAGJ,WAArB;AACH,GARM,CAAP;AASH,CAbD;;AAeA,OAAO,MAAMK,aAAa,GAAG;AACzBtB,EAAAA,UADyB;AAEzBM,EAAAA,YAFyB;AAGzBM,EAAAA,YAHyB;AAIzBE,EAAAA;AAJyB,CAAtB","sourcesContent":["import ActivityResponse from '../../interfaces/ActivityResponse';\nimport DefaultCenter from '../../interfaces/DefaultCenter';\nimport { getDistance } from 'geolib';\n\nconst comingSort = (activities: ActivityResponse[]): ActivityResponse[] => {\n    return [...activities].sort((act1, act2) => {\n        return act1.time - act2.time;\n    });\n};\n\nconst distanceSort = (\n    activities: ActivityResponse[],\n    location: DefaultCenter | undefined\n): ActivityResponse[] => {\n    if (location) {\n        return [...activities].sort((act1, act2) => {\n            const distance1 = getDistance(location, {\n                latitude: act1.latitude,\n                longitude: act1.longitude,\n            });\n            const distance2 = getDistance(location, {\n                latitude: act2.latitude,\n                longitude: act2.longitude,\n            });\n            return distance1 - distance2;\n        });\n    }\n    return activities;\n};\n\nconst capacitySort = (activities: ActivityResponse[]): ActivityResponse[] => {\n    return [...activities].sort((act1, act2) => {\n        return act1.capacity - act2.capacity;\n    });\n};\n\nconst activityLevelSort = (\n    activities: ActivityResponse[]\n): ActivityResponse[] => {\n    console.log('horeri');\n    return [...activities].sort((act1, act2) => {\n        const lastLetter1: number = act1.activityLevel.charCodeAt(\n            act1.activityLevel.length - 1\n        );\n        const lastLetter2: number = act2.activityLevel.charCodeAt(\n            act2.activityLevel.length - 1\n        );\n        return lastLetter2 - lastLetter1;\n    });\n};\n\nexport const SortFunctions = {\n    comingSort,\n    distanceSort,\n    capacitySort,\n    activityLevelSort,\n};\n"]},"metadata":{},"sourceType":"module"}