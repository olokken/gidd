{"ast":null,"code":"import{getDistance}from'geolib';var titleFilter=function titleFilter(activities,titleSearch){return activities.filter(function(act){if(titleSearch==''){return act;}else if(act.title!=null&&act.title.toLowerCase().includes(titleSearch.toLocaleLowerCase())){return act;}});};var dateFromFilter=function dateFromFilter(activities,fromDate){return activities.filter(function(act){return act.time>fromDate.getTime();});};var dateToFilter=function dateToFilter(activities,fromDate){return activities.filter(function(act){return act.time<fromDate.getTime();});};var activityLevelFilter=function activityLevelFilter(activities,activityLevel){return activities.filter(function(act){if(activityLevel.Low&&act.activityLevel=='LOW')return act;if(activityLevel.Medium&&act.activityLevel=='MEDIUM')return act;if(activityLevel.High&&act.activityLevel=='HIGH')return act;});};var showMyActivities=function showMyActivities(activities,show,user){console.log(user);return activities.filter(function(act){var registered=act.registeredParticipants.map(function(par){return par['userId'];}).filter(function(userID){return userID==user&&userID.length!==0;});if(show===false){return act;}else if(registered.length!==0&&show===true){return act;}});};var showFutureActivities=function showFutureActivities(activities,show){return activities.filter(function(act){var today=new Date();if(show===false){return act;}else if(act.time>=today.getTime()){return act;}});};var changeCapacity=function changeCapacity(activities,capacity){return activities.filter(function(act){if(act.capacity>=capacity[0]&&act.capacity<=capacity[1]){return act;}});};var tagFilter=function tagFilter(activities,tags){return activities.filter(function(act){if(!tags||tags.length===0){return act;}else{var containsTags=true;if(tags.length>1){containsTags=true;act.tags.forEach(function(tag){tags.forEach(function(myTag){console.log('min tag'+myTag+'din tag '+tag);if(tag.indexOf(myTag)===-1){containsTags=false;}});});}else{containsTags=false;console.log('mindre enn 1 tag');act.tags.forEach(function(tag){tags.forEach(function(myTag){console.log('min tag'+myTag+'din tag '+tag);if(tag===myTag){containsTags=true;}});});}if(containsTags){return act;}}});};var distanceFilter=function distanceFilter(activities,distance,location){return activities.filter(function(act){if(location&&distance){var dist=getDistance(location,{latitude:act.latitude,longitude:act.longitude});dist=dist/1000;if(dist<=distance){return act;}}else{return act;}});};export var FilterFunctions={titleFilter:titleFilter,showMyActivities:showMyActivities,showFutureActivities:showFutureActivities,changeCapacity:changeCapacity,activityLevelFilter:activityLevelFilter,dateToFilter:dateToFilter,dateFromFilter:dateFromFilter,tagFilter:tagFilter,distanceFilter:distanceFilter};","map":{"version":3,"sources":["/Users/olelokken/DEV/gidd/client/src/components/FilterComponents/FilterFunctions.tsx"],"names":["getDistance","titleFilter","activities","titleSearch","filter","act","title","toLowerCase","includes","toLocaleLowerCase","dateFromFilter","fromDate","time","getTime","dateToFilter","activityLevelFilter","activityLevel","Low","Medium","High","showMyActivities","show","user","console","log","registered","registeredParticipants","map","par","userID","length","showFutureActivities","today","Date","changeCapacity","capacity","tagFilter","tags","containsTags","forEach","tag","myTag","indexOf","distanceFilter","distance","location","dist","latitude","longitude","FilterFunctions"],"mappings":"AAGA,OAASA,WAAT,KAA4B,QAA5B,CAGA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAChBC,UADgB,CAEhBC,WAFgB,CAGK,CACrB,MAAOD,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAA2B,CAChD,GAAIF,WAAW,EAAI,EAAnB,CAAuB,CACnB,MAAOE,CAAAA,GAAP,CACH,CAFD,IAEO,IACHA,GAAG,CAACC,KAAJ,EAAa,IAAb,EACAD,GAAG,CAACC,KAAJ,CAAUC,WAAV,GAAwBC,QAAxB,CAAiCL,WAAW,CAACM,iBAAZ,EAAjC,CAFG,CAGL,CACE,MAAOJ,CAAAA,GAAP,CACH,CACJ,CATM,CAAP,CAUH,CAdD,CAgBA,GAAMK,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAACR,UAAD,CAAiCS,QAAjC,CAAoD,CACvE,MAAOT,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACO,IAAJ,CAAWD,QAAQ,CAACE,OAAT,EAApB,EAAlB,CAAP,CACH,CAFD,CAIA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACZ,UAAD,CAAiCS,QAAjC,CAAoD,CACrE,MAAOT,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACO,IAAJ,CAAWD,QAAQ,CAACE,OAAT,EAApB,EAAlB,CAAP,CACH,CAFD,CAIA,GAAME,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CACxBb,UADwB,CAExBc,aAFwB,CAGH,CACrB,MAAOd,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAAS,CAC9B,GAAIW,aAAa,CAACC,GAAd,EAAqBZ,GAAG,CAACW,aAAJ,EAAqB,KAA9C,CAAqD,MAAOX,CAAAA,GAAP,CACrD,GAAIW,aAAa,CAACE,MAAd,EAAwBb,GAAG,CAACW,aAAJ,EAAqB,QAAjD,CAA2D,MAAOX,CAAAA,GAAP,CAC3D,GAAIW,aAAa,CAACG,IAAd,EAAsBd,GAAG,CAACW,aAAJ,EAAqB,MAA/C,CAAuD,MAAOX,CAAAA,GAAP,CAC1D,CAJM,CAAP,CAKH,CATD,CAWA,GAAMe,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CACrBlB,UADqB,CAErBmB,IAFqB,CAGrBC,IAHqB,CAIA,CACrBC,OAAO,CAACC,GAAR,CAAYF,IAAZ,EACA,MAAOpB,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAA2B,CAChD,GAAMoB,CAAAA,UAAU,CAAGpB,GAAG,CAACqB,sBAAJ,CACdC,GADc,CACV,SAACC,GAAD,QAASA,CAAAA,GAAG,CAAC,QAAD,CAAZ,EADU,EAEdxB,MAFc,CAEP,SAACyB,MAAD,QAAYA,CAAAA,MAAM,EAAIP,IAAV,EAAkBO,MAAM,CAACC,MAAP,GAAkB,CAAhD,EAFO,CAAnB,CAGA,GAAIT,IAAI,GAAK,KAAb,CAAoB,CAChB,MAAOhB,CAAAA,GAAP,CACH,CAFD,IAEO,IAAIoB,UAAU,CAACK,MAAX,GAAsB,CAAtB,EAA2BT,IAAI,GAAK,IAAxC,CAA8C,CACjD,MAAOhB,CAAAA,GAAP,CACH,CACJ,CATM,CAAP,CAUH,CAhBD,CAkBA,GAAM0B,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CACzB7B,UADyB,CAEzBmB,IAFyB,CAGJ,CACrB,MAAOnB,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAA2B,CAChD,GAAM2B,CAAAA,KAAK,CAAG,GAAIC,CAAAA,IAAJ,EAAd,CACA,GAAIZ,IAAI,GAAK,KAAb,CAAoB,CAChB,MAAOhB,CAAAA,GAAP,CACH,CAFD,IAEO,IAAIA,GAAG,CAACO,IAAJ,EAAYoB,KAAK,CAACnB,OAAN,EAAhB,CAAiC,CACpC,MAAOR,CAAAA,GAAP,CACH,CACJ,CAPM,CAAP,CAQH,CAZD,CAcA,GAAM6B,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CACnBhC,UADmB,CAEnBiC,QAFmB,CAGE,CACrB,MAAOjC,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAA2B,CAChD,GAAIA,GAAG,CAAC8B,QAAJ,EAAgBA,QAAQ,CAAC,CAAD,CAAxB,EAA+B9B,GAAG,CAAC8B,QAAJ,EAAgBA,QAAQ,CAAC,CAAD,CAA3D,CAAgE,CAC5D,MAAO9B,CAAAA,GAAP,CACH,CACJ,CAJM,CAAP,CAKH,CATD,CAWA,GAAM+B,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CACdlC,UADc,CAEdmC,IAFc,CAGO,CACrB,MAAOnC,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAA2B,CAChD,GAAI,CAACgC,IAAD,EAASA,IAAI,CAACP,MAAL,GAAgB,CAA7B,CAAgC,CAC5B,MAAOzB,CAAAA,GAAP,CACH,CAFD,IAEO,CACH,GAAIiC,CAAAA,YAAY,CAAG,IAAnB,CACA,GAAID,IAAI,CAACP,MAAL,CAAc,CAAlB,CAAqB,CACjBQ,YAAY,CAAG,IAAf,CACAjC,GAAG,CAACgC,IAAJ,CAASE,OAAT,CAAiB,SAACC,GAAD,CAAS,CACtBH,IAAI,CAACE,OAAL,CAAa,SAACE,KAAD,CAAW,CACpBlB,OAAO,CAACC,GAAR,CAAY,UAAYiB,KAAZ,CAAoB,UAApB,CAAiCD,GAA7C,EACA,GAAIA,GAAG,CAACE,OAAJ,CAAYD,KAAZ,IAAuB,CAAC,CAA5B,CAA+B,CAC3BH,YAAY,CAAG,KAAf,CACH,CACJ,CALD,EAMH,CAPD,EAQH,CAVD,IAUO,CACHA,YAAY,CAAG,KAAf,CACAf,OAAO,CAACC,GAAR,CAAY,kBAAZ,EACAnB,GAAG,CAACgC,IAAJ,CAASE,OAAT,CAAiB,SAACC,GAAD,CAAS,CACtBH,IAAI,CAACE,OAAL,CAAa,SAACE,KAAD,CAAW,CACpBlB,OAAO,CAACC,GAAR,CAAY,UAAYiB,KAAZ,CAAoB,UAApB,CAAiCD,GAA7C,EACA,GAAIA,GAAG,GAAKC,KAAZ,CAAmB,CACfH,YAAY,CAAG,IAAf,CACH,CACJ,CALD,EAMH,CAPD,EAQH,CACD,GAAIA,YAAJ,CAAkB,CACd,MAAOjC,CAAAA,GAAP,CACH,CACJ,CACJ,CA/BM,CAAP,CAgCH,CApCD,CAsCA,GAAMsC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CACnBzC,UADmB,CAEnB0C,QAFmB,CAGnBC,QAHmB,CAIE,CACrB,MAAO3C,CAAAA,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAAS,CAC9B,GAAIwC,QAAQ,EAAID,QAAhB,CAA0B,CACtB,GAAIE,CAAAA,IAAI,CAAG9C,WAAW,CAAC6C,QAAD,CAAW,CAC7BE,QAAQ,CAAE1C,GAAG,CAAC0C,QADe,CAE7BC,SAAS,CAAE3C,GAAG,CAAC2C,SAFc,CAAX,CAAtB,CAIAF,IAAI,CAAGA,IAAI,CAAG,IAAd,CACA,GAAIA,IAAI,EAAIF,QAAZ,CAAsB,CAClB,MAAOvC,CAAAA,GAAP,CACH,CACJ,CATD,IASO,CACH,MAAOA,CAAAA,GAAP,CACH,CACJ,CAbM,CAAP,CAcH,CAnBD,CAqBA,MAAO,IAAM4C,CAAAA,eAAe,CAAG,CAC3BhD,WAAW,CAAXA,WAD2B,CAE3BmB,gBAAgB,CAAhBA,gBAF2B,CAG3BW,oBAAoB,CAApBA,oBAH2B,CAI3BG,cAAc,CAAdA,cAJ2B,CAK3BnB,mBAAmB,CAAnBA,mBAL2B,CAM3BD,YAAY,CAAZA,YAN2B,CAO3BJ,cAAc,CAAdA,cAP2B,CAQ3B0B,SAAS,CAATA,SAR2B,CAS3BO,cAAc,CAAdA,cAT2B,CAAxB","sourcesContent":["import ActivityResponse from '../../interfaces/ActivityResponse';\nimport ActivityLevels from '../../interfaces/ActivityLevels';\nimport DefaultCenter from '../../interfaces/DefaultCenter';\nimport { getDistance } from 'geolib';\n\n\nconst titleFilter = (\n    activities: ActivityResponse[],\n    titleSearch: string\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        if (titleSearch == '') {\n            return act;\n        } else if (\n            act.title != null &&\n            act.title.toLowerCase().includes(titleSearch.toLocaleLowerCase())\n        ) {\n            return act;\n        }\n    });\n};\n\nconst dateFromFilter = (activities: ActivityResponse[], fromDate: Date) => {\n    return activities.filter((act) => act.time > fromDate.getTime());\n};\n\nconst dateToFilter = (activities: ActivityResponse[], fromDate: Date) => {\n    return activities.filter((act) => act.time < fromDate.getTime());\n};\n\nconst activityLevelFilter = (\n    activities: ActivityResponse[],\n    activityLevel: ActivityLevels\n): ActivityResponse[] => {\n    return activities.filter((act) => {\n        if (activityLevel.Low && act.activityLevel == 'LOW') return act;\n        if (activityLevel.Medium && act.activityLevel == 'MEDIUM') return act;\n        if (activityLevel.High && act.activityLevel == 'HIGH') return act;\n    });\n};\n\nconst showMyActivities = (\n    activities: ActivityResponse[],\n    show: boolean,\n    user: string\n): ActivityResponse[] => {\n    console.log(user);\n    return activities.filter((act: ActivityResponse) => {\n        const registered = act.registeredParticipants\n            .map((par) => par['userId'])\n            .filter((userID) => userID == user && userID.length !== 0);\n        if (show === false) {\n            return act;\n        } else if (registered.length !== 0 && show === true) {\n            return act;\n        }\n    });\n};\n\nconst showFutureActivities = (\n    activities: ActivityResponse[],\n    show: boolean\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        const today = new Date();\n        if (show === false) {\n            return act;\n        } else if (act.time >= today.getTime()) {\n            return act;\n        }\n    });\n};\n\nconst changeCapacity = (\n    activities: ActivityResponse[],\n    capacity: number[]\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        if (act.capacity >= capacity[0] && act.capacity <= capacity[1]) {\n            return act;\n        }\n    });\n};\n\nconst tagFilter = (\n    activities: ActivityResponse[],\n    tags: string[] | undefined\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        if (!tags || tags.length === 0) {\n            return act;\n        } else {\n            let containsTags = true;\n            if (tags.length > 1) {\n                containsTags = true;\n                act.tags.forEach((tag) => {\n                    tags.forEach((myTag) => {\n                        console.log('min tag' + myTag + 'din tag ' + tag);\n                        if (tag.indexOf(myTag) === -1) {\n                            containsTags = false;\n                        }\n                    });\n                });\n            } else {\n                containsTags = false;\n                console.log('mindre enn 1 tag');\n                act.tags.forEach((tag) => {\n                    tags.forEach((myTag) => {\n                        console.log('min tag' + myTag + 'din tag ' + tag);\n                        if (tag === myTag) {\n                            containsTags = true;\n                        }\n                    });\n                });\n            }\n            if (containsTags) {\n                return act;\n            }\n        }\n    });\n};\n\nconst distanceFilter = (\n    activities: ActivityResponse[],\n    distance: number | undefined,\n    location: DefaultCenter | undefined\n): ActivityResponse[] => {\n    return activities.filter((act) => {\n        if (location && distance) {\n            let dist = getDistance(location, {\n                latitude: act.latitude,\n                longitude: act.longitude,\n            });\n            dist = dist / 1000;\n            if (dist <= distance) {\n                return act;\n            }\n        } else {\n            return act;\n        }\n    });\n};\n\nexport const FilterFunctions = {\n    titleFilter,\n    showMyActivities,\n    showFutureActivities,\n    changeCapacity,\n    activityLevelFilter,\n    dateToFilter,\n    dateFromFilter,\n    tagFilter,\n    distanceFilter,\n};\n"]},"metadata":{},"sourceType":"module"}