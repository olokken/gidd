{"ast":null,"code":"var _jsxFileName = \"/Users/olelokken/DEV/gidd/client/src/containers/Map.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport MapComponent from '../components/MapComponents/MapComponent';\nimport MapMarker from '../components/MapComponents/MapMarker';\nimport GeoSuggest from '../components/MapComponents/GeoSuggest';\nimport axios from '../Axios';\nimport { UserContext } from '../UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    justify-content: center;\n`;\n_c = Container;\n\nconst Map = () => {\n  _s();\n\n  const [activities, setActivities] = useState([]);\n  const [defaultCenter, setDefaultCenter] = useState();\n  const [markers, setMarkers] = useState();\n  const {\n    user\n  } = useContext(UserContext);\n\n  const getCoordinates = () => {\n    fetch(`https://geolocation-db.com/json/${process.env.REACT_APP_GEOLOCATION_KEY}`).then(response => response.json()).then(data => {\n      if (data) {\n        const latitude = data.latitude;\n        const longitude = data.longitude;\n        console.log(latitude + ', ' + longitude);\n        setDefaultCenter({\n          lat: latitude,\n          lng: longitude\n        });\n      } else {\n        setDefaultCenter({\n          lat: 63,\n          lng: 10\n        });\n      }\n    });\n  };\n\n  const deleteActivity = id => {\n    axios.delete(`/activity/${id}`).then(loadActivities).then(() => window.location.reload());\n  };\n\n  const loadActivities = () => {\n    axios.get(`/activity?userId=${localStorage.getItem('userID')}`).then(response => {\n      setActivities(response.data['activities']);\n    }).then(() => setMarkers(renderMarkers)).catch(error => console.log(error));\n  };\n\n  const register = activityId => {\n    return new Promise(resolve => {\n      axios.delete(`/user/${user}/activity/${activityId}`);\n      resolve();\n    });\n  };\n\n  const unRegister = activityId => {\n    return new Promise(resolve => {\n      axios.post('/user/activity', {\n        userId: user,\n        activityId: activityId\n      });\n      resolve();\n    });\n  };\n\n  useEffect(() => {\n    getCoordinates();\n  }, []);\n  useEffect(() => {\n    loadActivities();\n  }, [markers]);\n\n  const renderMarkers = () => {\n    if (activities) {\n      return activities.map((act, index) => {\n        return /*#__PURE__*/_jsxDEV(MapMarker, {\n          register: register,\n          unRegister: unRegister,\n          deleteActivity: id => deleteActivity(id),\n          activity: act,\n          position: {\n            lat: act.latitude,\n            lng: act.longitude\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this);\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(GeoSuggest, {\n      onLocationChange: location => setDefaultCenter(location)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), defaultCenter && /*#__PURE__*/_jsxDEV(MapComponent, {\n      defaultCenter: defaultCenter,\n      width: \"100vw\",\n      height: \"85vh\",\n      children: markers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Map, \"9qH/meJ7jcMwM2OL8cKfQAJK28k=\");\n\n_c2 = Map;\nexport default Map;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Map\");","map":{"version":3,"sources":["/Users/olelokken/DEV/gidd/client/src/containers/Map.tsx"],"names":["React","useState","useEffect","useContext","styled","MapComponent","MapMarker","GeoSuggest","axios","UserContext","Container","div","Map","activities","setActivities","defaultCenter","setDefaultCenter","markers","setMarkers","user","getCoordinates","fetch","process","env","REACT_APP_GEOLOCATION_KEY","then","response","json","data","latitude","longitude","console","log","lat","lng","deleteActivity","id","delete","loadActivities","window","location","reload","get","localStorage","getItem","renderMarkers","catch","error","register","activityId","Promise","resolve","unRegister","post","userId","map","act","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport MapComponent from '../components/MapComponents/MapComponent';\nimport MapMarker from '../components/MapComponents/MapMarker';\nimport GeoSuggest from '../components/MapComponents/GeoSuggest';\nimport DefaultCenter from '../interfaces/DefaultCenter';\nimport axios from '../Axios';\nimport ActivityResponse from '../interfaces/ActivityResponse';\nimport { UserContext } from '../UserContext';\n\nconst Container = styled.div`\n    justify-content: center;\n`;\n\nconst Map = () => {\n    const [activities, setActivities] = useState<ActivityResponse[]>([]);\n    const [defaultCenter, setDefaultCenter] = useState<DefaultCenter>();\n    const [markers, setMarkers] = useState<React.ReactNode>();\n    const { user } = useContext(UserContext);\n\n    const getCoordinates = () => {\n        fetch(\n            `https://geolocation-db.com/json/${process.env.REACT_APP_GEOLOCATION_KEY}`\n        )\n            .then((response) => response.json())\n            .then((data) => {\n                if (data) {\n                    const latitude: number = data.latitude;\n                    const longitude: number = data.longitude;\n                    console.log(latitude + ', ' + longitude);\n                    setDefaultCenter({ lat: latitude, lng: longitude });\n                } else {\n                    setDefaultCenter({ lat: 63, lng: 10 });\n                }\n            });\n    };\n\n    const deleteActivity = (id: number) => {\n        axios\n            .delete(`/activity/${id}`)\n            .then(loadActivities)\n            .then(() => window.location.reload());\n    };\n\n    const loadActivities = () => {\n        axios\n            .get(`/activity?userId=${localStorage.getItem('userID')}`)\n            .then((response) => {\n                setActivities(response.data['activities']);\n            })\n            .then(() => setMarkers(renderMarkers))\n            .catch((error) => console.log(error));\n    };\n\n    const register = (activityId: number): Promise<void> => {\n        return new Promise((resolve) => {\n            axios.delete(`/user/${user}/activity/${activityId}`);\n            resolve();\n        });\n    };\n\n    const unRegister = (activityId: number): Promise<void> => {\n        return new Promise((resolve) => {\n            axios.post('/user/activity', {\n                userId: user,\n                activityId: activityId,\n            });\n            resolve();\n        });\n    };\n\n    useEffect(() => {\n        getCoordinates();\n    }, []);\n\n    useEffect(() => {\n        loadActivities();\n    }, [markers]);\n\n    const renderMarkers = (): React.ReactNode[] | undefined => {\n        if (activities) {\n            return activities.map((act: ActivityResponse, index: number) => {\n                return (\n                    <MapMarker\n                        register={register}\n                        unRegister={unRegister}\n                        deleteActivity={(id) => deleteActivity(id)}\n                        key={index}\n                        activity={act}\n                        position={{ lat: act.latitude, lng: act.longitude }}\n                    ></MapMarker>\n                );\n            });\n        }\n    };\n\n    return (\n        <Container>\n            <GeoSuggest\n                onLocationChange={(location) => setDefaultCenter(location)}\n            ></GeoSuggest>\n            {defaultCenter && (\n                <MapComponent\n                    defaultCenter={defaultCenter}\n                    width=\"100vw\"\n                    height=\"85vh\"\n                >\n                    {markers}\n                </MapComponent>\n            )}\n        </Container>\n    );\n};\n\nexport default Map;\n"]},"metadata":{},"sourceType":"module"}