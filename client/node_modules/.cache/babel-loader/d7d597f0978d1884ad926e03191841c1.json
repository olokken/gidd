{"ast":null,"code":"import { getDistance } from 'geolib';\n\nconst titleFilter = (activities, titleSearch) => {\n  return activities.filter(act => {\n    if (titleSearch == '') {\n      return act;\n    } else if (act.title != null && act.title.toLowerCase().includes(titleSearch.toLocaleLowerCase())) {\n      return act;\n    }\n  });\n};\n\nconst dateFromFilter = (activities, fromDate) => {\n  return activities.filter(act => act.time > fromDate.getTime());\n};\n\nconst dateToFilter = (activities, fromDate) => {\n  return activities.filter(act => act.time < fromDate.getTime());\n};\n\nconst activityLevelFilter = (activities, activityLevel) => {\n  return activities.filter(act => {\n    if (activityLevel.Low && act.activityLevel == 'LOW') return act;\n    if (activityLevel.Medium && act.activityLevel == 'MEDIUM') return act;\n    if (activityLevel.High && act.activityLevel == 'HIGH') return act;\n  });\n};\n\nconst showMyActivities = (activities, show, user) => {\n  console.log(user);\n  return activities.filter(act => {\n    const registered = act.registeredParticipants.map(par => par['userId']).filter(userID => userID == user && userID.length !== 0);\n\n    if (show === false) {\n      return act;\n    } else if (registered.length !== 0 && show === true) {\n      return act;\n    }\n  });\n};\n\nconst showFutureActivities = (activities, show) => {\n  return activities.filter(act => {\n    const today = new Date();\n\n    if (show === false) {\n      return act;\n    } else if (act.time >= today.getTime()) {\n      return act;\n    }\n  });\n};\n\nconst changeCapacity = (activities, capacity) => {\n  return activities.filter(act => {\n    if (act.capacity >= capacity[0] && act.capacity <= capacity[1]) {\n      return act;\n    }\n  });\n};\n\nconst tagFilter = (activities, tags) => {\n  return activities.filter(act => {\n    if (!tags || tags.length === 0) {\n      return act;\n    } else {\n      let containsTags = true;\n\n      if (tags.length > 1) {\n        containsTags = true;\n        act.tags.forEach(tag => {\n          tags.forEach(myTag => {\n            console.log('min tag' + myTag + 'din tag ' + tag);\n\n            if (tag.indexOf(myTag) === -1) {\n              containsTags = false;\n            }\n          });\n        });\n      } else {\n        containsTags = false;\n        console.log('mindre enn 1 tag');\n        act.tags.forEach(tag => {\n          tags.forEach(myTag => {\n            console.log('min tag' + myTag + 'din tag ' + tag);\n\n            if (tag === myTag) {\n              containsTags = true;\n            }\n          });\n        });\n      }\n\n      if (containsTags) {\n        return act;\n      }\n    }\n  });\n};\n\nconst distanceFilter = (activities, distance, location) => {\n  return activities.filter(act => {\n    if (location && distance) {\n      let dist = getDistance(location, {\n        latitude: act.latitude,\n        longitude: act.longitude\n      });\n      dist = dist / 1000;\n\n      if (dist <= distance) {\n        return act;\n      }\n    } else {\n      return act;\n    }\n  });\n};\n\nexport const FilterFunctions = {\n  titleFilter,\n  showMyActivities,\n  showFutureActivities,\n  changeCapacity,\n  activityLevelFilter,\n  dateToFilter,\n  dateFromFilter,\n  tagFilter,\n  distanceFilter\n};","map":{"version":3,"sources":["/Users/olelokken/DEV/gidd/client/src/components/FilterComponents/FilterFunctions.tsx"],"names":["getDistance","titleFilter","activities","titleSearch","filter","act","title","toLowerCase","includes","toLocaleLowerCase","dateFromFilter","fromDate","time","getTime","dateToFilter","activityLevelFilter","activityLevel","Low","Medium","High","showMyActivities","show","user","console","log","registered","registeredParticipants","map","par","userID","length","showFutureActivities","today","Date","changeCapacity","capacity","tagFilter","tags","containsTags","forEach","tag","myTag","indexOf","distanceFilter","distance","location","dist","latitude","longitude","FilterFunctions"],"mappings":"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","sourcesContent":["import ActivityResponse from '../../interfaces/ActivityResponse';\nimport ActivityLevels from '../../interfaces/ActivityLevels';\nimport DefaultCenter from '../../interfaces/DefaultCenter';\nimport { getDistance } from 'geolib';\n\n\nconst titleFilter = (\n    activities: ActivityResponse[],\n    titleSearch: string\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        if (titleSearch == '') {\n            return act;\n        } else if (\n            act.title != null &&\n            act.title.toLowerCase().includes(titleSearch.toLocaleLowerCase())\n        ) {\n            return act;\n        }\n    });\n};\n\nconst dateFromFilter = (activities: ActivityResponse[], fromDate: Date) => {\n    return activities.filter((act) => act.time > fromDate.getTime());\n};\n\nconst dateToFilter = (activities: ActivityResponse[], fromDate: Date) => {\n    return activities.filter((act) => act.time < fromDate.getTime());\n};\n\nconst activityLevelFilter = (\n    activities: ActivityResponse[],\n    activityLevel: ActivityLevels\n): ActivityResponse[] => {\n    return activities.filter((act) => {\n        if (activityLevel.Low && act.activityLevel == 'LOW') return act;\n        if (activityLevel.Medium && act.activityLevel == 'MEDIUM') return act;\n        if (activityLevel.High && act.activityLevel == 'HIGH') return act;\n    });\n};\n\nconst showMyActivities = (\n    activities: ActivityResponse[],\n    show: boolean,\n    user: string\n): ActivityResponse[] => {\n    console.log(user);\n    return activities.filter((act: ActivityResponse) => {\n        const registered = act.registeredParticipants\n            .map((par) => par['userId'])\n            .filter((userID) => userID == user && userID.length !== 0);\n        if (show === false) {\n            return act;\n        } else if (registered.length !== 0 && show === true) {\n            return act;\n        }\n    });\n};\n\nconst showFutureActivities = (\n    activities: ActivityResponse[],\n    show: boolean\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        const today = new Date();\n        if (show === false) {\n            return act;\n        } else if (act.time >= today.getTime()) {\n            return act;\n        }\n    });\n};\n\nconst changeCapacity = (\n    activities: ActivityResponse[],\n    capacity: number[]\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        if (act.capacity >= capacity[0] && act.capacity <= capacity[1]) {\n            return act;\n        }\n    });\n};\n\nconst tagFilter = (\n    activities: ActivityResponse[],\n    tags: string[] | undefined\n): ActivityResponse[] => {\n    return activities.filter((act: ActivityResponse) => {\n        if (!tags || tags.length === 0) {\n            return act;\n        } else {\n            let containsTags = true;\n            if (tags.length > 1) {\n                containsTags = true;\n                act.tags.forEach((tag) => {\n                    tags.forEach((myTag) => {\n                        console.log('min tag' + myTag + 'din tag ' + tag);\n                        if (tag.indexOf(myTag) === -1) {\n                            containsTags = false;\n                        }\n                    });\n                });\n            } else {\n                containsTags = false;\n                console.log('mindre enn 1 tag');\n                act.tags.forEach((tag) => {\n                    tags.forEach((myTag) => {\n                        console.log('min tag' + myTag + 'din tag ' + tag);\n                        if (tag === myTag) {\n                            containsTags = true;\n                        }\n                    });\n                });\n            }\n            if (containsTags) {\n                return act;\n            }\n        }\n    });\n};\n\nconst distanceFilter = (\n    activities: ActivityResponse[],\n    distance: number | undefined,\n    location: DefaultCenter | undefined\n): ActivityResponse[] => {\n    return activities.filter((act) => {\n        if (location && distance) {\n            let dist = getDistance(location, {\n                latitude: act.latitude,\n                longitude: act.longitude,\n            });\n            dist = dist / 1000;\n            if (dist <= distance) {\n                return act;\n            }\n        } else {\n            return act;\n        }\n    });\n};\n\nexport const FilterFunctions = {\n    titleFilter,\n    showMyActivities,\n    showFutureActivities,\n    changeCapacity,\n    activityLevelFilter,\n    dateToFilter,\n    dateFromFilter,\n    tagFilter,\n    distanceFilter,\n};\n"]},"metadata":{},"sourceType":"module"}